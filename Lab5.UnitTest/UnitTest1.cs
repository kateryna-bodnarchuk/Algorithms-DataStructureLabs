using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.IO;
using System.Linq;
using System.Collections.Generic;

namespace Lab5.UnitTest
{
    /// <summary>
    /// ? ?????????? ????? ????????? ???? ?????. ?????????? ???-??????? ? ????? ?????. 
    /// ? ?????? ???-??????? ??????????? ????? ???????? ????????. ??????????? ????????? 
    /// ??????? ??????? ?????????? ?????????. ????????? ????? ????????? ? ?????????? ?????? ????? ? ???-???????.
    /// </summary>
    [TestClass]
    public class HashFunction
    {
        public static int MidsquareTechnique(int key) // ???????? ?????????
        {
            int once = MidsquareTechniqueCore(key);
            return MidsquareTechniqueCore(once);
        }
        private static int MidsquareTechniqueCore(int key) // ????? ???????? ????????
        {
            key *= key;
            key >>= 11;
            int hash = key % 1024;
            if (key < 0) // betwise NOT ???'????? ????? 
            {
                hash = ~hash;
            }
            return hash;
        }
        public static List<int> GetHash(IList<int> numbers)
        {
            var resultList = new List<int>();
            foreach (var item in numbers)
            {
                resultList.Add(MidsquareTechnique(item));
            }
            resultList.Sort();
            return resultList;
        }
        [TestMethod]
        public void TestMethod1()
        {
            string[] lines = File.ReadAllLines(".\\Numbers.txt");
            int[] numbers = lines.Select(i => int.Parse(i)).ToArray();
            List<int> hashList = GetHash(numbers);

            int b = -5;
            int bHash = MidsquareTechnique(b);
            int bIndex = hashList.BinarySearch(bHash);
            Assert.IsTrue(bIndex > 0);
        }
    }
}
